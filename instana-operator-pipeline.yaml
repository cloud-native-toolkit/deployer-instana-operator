---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: instana-operator
  annotations:
spec:
  params:
    - name: namespace
      type: string
      description: Namespace where Instana operator will be installed
      default: "instana-operator"
    - name: storage-class
      type: string
      description: RWX storage class needed for cp4d
      default: "ocs-storagecluster-cephfs"
      type: string
      description: Cloud Pak for Data version
      default: "4.7.1"
    - name: agent-key
      type: string
      description: The Instana agent key with permissions for pulling Instana images
      default: "false"
    - name: agent-key-secret-name
      type: string
      description: The name of the secret storing the Instana agent key
      default: "instana-agent-key"
  # finally:
  #   - name: update-configmap-failure
  #     when:
  #       - input: $(tasks.run-the-deployer.status)
  #         operator: notin
  #         values: ["Succeeded"]
  #     taskRef:
  #       kind: Task
  #       name: ibm-pak
  #     params:
  #       - name: SCRIPT
  #         value: |
  #           oc patch configmap/pipeline-output -p '{"data":{"Status":"Pipeline run failed. See Pipeline run for more details and consider running the pipeline again."}}'
  #   - name: update-configmap-success
  #     when:
  #       - input: $(tasks.run-the-deployer.status)
  #         operator: in
  #         values: ["Succeeded"]
  #     taskRef:
  #       kind: Task
  #       name: ibm-pak
  #     params:
  #       - name: SCRIPT
  #         value: |
  #           cpd_route=$(oc get route cpd -n cpd --template='{{ .spec.host }}')
  #           echo "Console Route: $cpd_route"
  #           initial_admin_password=$(oc get secret admin-user-details -n cpd -o jsonpath='{.data.initial_admin_password}' | base64 -d)
  #           echo "Username: admin"
  #           echo "Password: $initial_admin_password"

  #           oc patch configmap/pipeline-output -p "{\"data\":{\"Status\":\"Pipeline run Successful\",\"CP4D-Console-Route\":\"${cpd_route}\",\"CP4D-Initial-Admin-Username\":\"admin\",\"CP4D-Initial-Admin-Password\":\"${initial_admin_password}\"}}"
  tasks:
    - name: add-namespace
      retries: 3
      taskRef:
        kind: Task
        name: ibm-pak
      params:
        - name: SCRIPT
          value: |
            oc apply -f - <<EOF 
            apiVersion: v1
            kind: Namespace
            metadata:
              creationTimestamp: null
              name: $(params.namespace)
            EOF
    - name: test-agent-key
      retries: 3
      params:
        - name: agent-key
          value: "$(params.agent-key)"
      taskSpec:
        params:
          - name: agent-key
            type: string
            description: user provided Instana agent key
        steps:
          - image: docker
            script: |
              echo "testing key for artifact-public.instana.io"
              docker login artifact-public.instana.io --username _ --password $(params.agent-key)
      runAfter:
        - add-namespace
    - name: create-agent-key-secret
      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - test-agent-key
      retries: 3
      params:
        - name: SCRIPT
          value: |
            oc delete secret $(params.agent-key-secret-name) --namespace=$(params.namespace)
            oc create secret docker-registry $(params.agent-key-secret-name) --namespace=$(params.namespace) --docker-username=_ --docker-password=$(params.agent-key) --docker-server=artifact-public.instana.io
    - name: install-cert-manager
      taskRef:
        kind: Task
        name: ibm-pak
      retries: 3
      params:
        - name: SCRIPT
          value: |
            oc create namespace cert-manager            
            oc apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.2/cert-manager.yaml    
    - name: install-instana
      taskSpec:
        params:
        - name: agent-key
          type: string
          default: $(params.agent-key)
        - name: namespace
          type: string
          default: $(params.namespace)
        - name: agent-key-secret-name
          type: string
          default: $(params.agent-key-secret-name)
        steps:
        - image: registry.access.redhat.com/ubi8/ubi
          script: |
            cat << EOF > /etc/yum.repos.d/Instana-Product.repo
            [instana-product]
            name=Instana-Product
            baseurl=https://_:$(params.agent-key)@artifact-public.instana.io/artifactory/rel-rpm-public-virtual/
            enabled=1
            gpgcheck=0
            gpgkey=https://_:$(params.agent-key)@artifact-public.instana.io/artifactory/api/security/keypair/public/repositories/rel-rpm-public-virtual
            repo_gpgcheck=1
            EOF

            yum clean expire-cache -y
            yum update -y
            yum install -y instana-kubectl

            kubectl-instana --version

            cat <<EOT >> /tmp/values.yaml
            imagePullSecrets:
              - name: $(params.agent-key-secret-name)
            EOT

            kubectl-instana operator apply --namespace=$(params.namespace) --values /tmp/values.yaml

            kubectl-instana operator apply --namespace=$(params.namespace)

            ls -a /tmp
      runAfter:
          - create-agent-key-secret
          - install-cert-manager
      # retries: 3
      




    # - name: configure-cloud-paks-services
    #   runAfter:
    #     - create-entitlement-key-secret
    #   retries: 3
    #   taskRef:
    #     kind: Task
    #     name: ibm-pak
    #   params:
    #     - name: SCRIPT
    #       value: |
    #         oc apply -f - <<EOF
    #         apiVersion: v1
    #         kind: ConfigMap
    #         metadata:
    #           name: cloud-pak-deployer-config
    #           namespace: $(params.namespace)
    #         data:
    #           cpd-config.yaml: |
    #             global_config:
    #               environment_name: demo
    #               cloud_platform: existing-ocp
    #               confirm_destroy: True

    #             openshift:
    #             - name: cpd-demo
    #               ocp_version: '$(params.ocp-client-version)'
    #               cluster_name: cpd-demo
    #               domain_name: example.com
    #               openshift_storage:
    #               - storage_name: auto-storage
    #                 storage_type: ocs

    #             #
    #             # All tested cartridges. To install, change the "state" property to "installed". To uninstall, change the state
    #             # to "removed" or comment out the entire cartridge. Make sure that the "-" and properties are aligned with the lite
    #             # cartridge; the "-" is at position 3 and the property starts at position 5.
    #             #
    #             # If a cartridge has dependencies and you want to install it, you must ensure that the dependent cartridge is also
    #             # installed.
    #             #

    #             cp4d:
    #             - project: cpd
    #               openshift_cluster_name: cpd-demo
    #               cp4d_version: $(params.cp4d-version)
    #               sequential_install: False
    #               accept_licenses: True
    #               cartridges:
    #               - name: cp-foundation
    #                 license_service:
    #                   state: disabled
    #                   threads_per_core: 2

    #               - name: lite

    #               - name: scheduler
    #                 state: $(params.scheduler-state)

    #               - name: analyticsengine
    #                 description: Analytics Engine Powered by Apache Spark
    #                 size: $(params.analyticsengine-size)
    #                 state: $(params.analyticsengine-state)

    #               - name: bigsql
    #                 description: Db2 Big SQL
    #                 state: $(params.bigsql-state)

    #               - name: ca
    #                 description: Cognos Analytics
    #                 size: $(params.ca-size)
    #                 instances:
    #                 - name: $(params.ca-instance)
    #                   metastore_ref: ca-metastore
    #                 state: $(params.ca-state)

    #               - name: cde
    #                 description: Cognos Dashboards
    #                 state: $(params.cde-state)

    #               - name: datagate
    #                 description: Db2 Data Gate
    #                 state: $(params.datagate-state)

    #               - name: datastage-ent
    #                 description: DataStage Enterprise
    #                 state: $(params.datastage-ent-state)

    #               - name: datastage-ent-plus
    #                 description: DataStage Enterprise Plus
    #                 state: $(params.datastage-ent-plus-state)
    #                 # instances:
    #                 #   - name: ds-instance
    #                 #     # Optional settings
    #                 #     description: "datastage ds-instance"
    #                 #     size: medium
    #                 #     storage_class: efs-nfs-client
    #                 #     storage_size_gb: 60
    #                 #     # Custom Scale options
    #                 #     scale_px_runtime:
    #                 #       replicas: 2
    #                 #       cpu_request: 500m
    #                 #       cpu_limit: 2
    #                 #       memory_request: 2Gi
    #                 #       memory_limit: 4Gi
    #                 #     scale_px_compute:
    #                 #       replicas: 2
    #                 #       cpu_request: 1
    #                 #       cpu_limit: 3
    #                 #       memory_request: 4Gi
    #                 #       memory_limit: 12Gi

    #               - name: db2
    #                 description: Db2 OLTP
    #                 size: $(params.db2-size)
    #                 instances:
    #                 - name: ca-metastore
    #                   metadata_size_gb: 20
    #                   data_size_gb: 20
    #                   backup_size_gb: 20
    #                   transactionlog_size_gb: 20
    #                 state: $(params.db2-state)

    #               - name: db2wh
    #                 description: Db2 Warehouse
    #                 state: $(params.db2wh-state)

    #               - name: dmc
    #                 description: Db2 Data Management Console
    #                 state: $(params.dmc-state)

    #               - name: dods
    #                 description: Decision Optimization
    #                 size: $(params.dods-size)
    #                 state: $(params.dods-state)

    #               - name: dp
    #                 description: Data Privacy
    #                 size: $(params.dp-size)
    #                 state: $(params.dp-state)

    #               - name: dpra
    #                 description: Data Privacy Risk Assessment
    #                 state: $(params.dpra-state)

    #               - name: dv
    #                 description: Data Virtualization
    #                 size: $(params.dv-size)
    #                 instances:
    #                 - name: $(params.dv-instance)
    #                 state: $(params.dv-state)

    #               # Please note that for EDB Postgress, a secret edb-postgres-license-key must be created in the vault
    #               # before deploying
    #               - name: edb_cp4d
    #                 description: EDB Postgres
    #                 state: removed
    #                 instances:
    #                   - name: instance1
    #                     version: "13.5"
    #                     #type: Standard
    #                     #members: 1
    #                     #size_gb: 50
    #                     #resource_request_cpu: 1000m
    #                     #resource_request_memory: 4Gi
    #                     #resource_limit_cpu: 1000m
    #                     #resource_limit_memory: 4Gi

    #               - name: factsheet
    #                 description: AI Factsheets
    #                 size: $(params.factsheet-size)
    #                 state: $(params.factsheet-state)

    #               - name: hadoop
    #                 description: Execution Engine for Apache Hadoop
    #                 size: $(params.hadoop-size)
    #                 state: $(params.hadoop-state)

    #               - name: match360
    #                 description: IBM Match 360
    #                 size: $(params.match360-size)
    #                 wkc_enabled: $(params.match360-wkc-enabled)
    #                 state: $(params.match360-state)

    #               - name: openpages
    #                 description: OpenPages
    #                 state: $(params.openpages-state)

    #               # For Planning Analytics, the case version is needed due to defect in olm utils
    #               - name: planning-analytics
    #                 description: Planning Analytics
    #                 state: $(params.planning-analytics-state)

    #               - name: replication
    #                 description: Data Replication
    #                 license: IDRC
    #                 size: $(params.replication-size)
    #                 state: $(params.replication-state)

    #               - name: rstudio
    #                 description: RStudio Server with R 3.6
    #                 size: $(params.rstudio-size)
    #                 state: $(params.rstudio-state)

    #               - name: spss
    #                 description: SPSS Modeler
    #                 state: $(params.spss-state)

    #               - name: voice-gateway
    #                 description: Voice Gateway
    #                 replicas: $(params.voice-gateway-replicas)
    #                 state: $(params.voice-gateway-state)

    #               - name: watson-assistant
    #                 description: Watson Assistant
    #                 size: $(params.watson-assistant-size)
    #                 state: $(params.watson-assistant-state)

    #               - name: watson-discovery
    #                 description: Watson Discovery
    #                 state: $(params.watson-discovery-state)

    #               # For Watson Knowledge Studio, the case version is needed due to defect in olm utils
    #               - name: watson-ks
    #                 description: Watson Knowledge Studio
    #                 size: $(params.watson-ks-size)
    #                 state: $(params.watson-ks-state)

    #               - name: watson-openscale
    #                 description: Watson OpenScale
    #                 size: $(params.watson-openscale-size)
    #                 state: $(params.watson-openscale-state)

    #               - name: watson-speech
    #                 description: Watson Speech (STT and TTS)
    #                 stt_size: $(params.watson-speech-stt-size)
    #                 tts_size: $(params.watson-speech-tts-size)
    #                 state: $(params.watson-speech-state)

    #               - name: wkc
    #                 description: Watson Knowledge Catalog
    #                 size: $(params.wkc-size)
    #                 state: $(params.wkc-state)
    #                 installation_options:
    #                   install_wkc_core_only: $(params.wkc-options-core-only)
    #                   enableKnowledgeGraph: $(params.wkc-options-knowledge-graph)
    #                   enableDataQuality: $(params.wkc-options-enable-data-quality)
    #                   enableFactSheet: $(params.wkc-options-enable-fact-sheet)
    #                   enableMANTA: $(params.wkc-options-enable-manta)

    #               - name: wml
    #                 description: Watson Machine Learning
    #                 size: $(params.wml-size)
    #                 state: $(params.wml-state)

    #               - name: wml-accelerator
    #                 description: Watson Machine Learning Accelerator
    #                 replicas: $(params.wml-accelerator-replicas)
    #                 size: $(params.wml-accelerator-size)
    #                 state: $(params.wml-accelerator-state)

    #               - name: ws
    #                 description: Watson Studio
    #                 state: $(params.ws-state)

    #               - name: ws-pipelines
    #                 description: Watson Studio Pipelines
    #                 state: $(params.ws-pipelines-state)

    #               - name: ws-runtimes
    #                 description: Watson Studio Runtimes
    #                 runtimes:
    #                 - ibm-cpd-ws-runtime-py39
    #                 - ibm-cpd-ws-runtime-222-py
    #                 - ibm-cpd-ws-runtime-py39gpu
    #                 - ibm-cpd-ws-runtime-222-pygpu
    #                 - ibm-cpd-ws-runtime-r36
    #                 - ibm-cpd-ws-runtime-222-r
    #                 state: $(params.ws-runtimes-state)

    #               # Cartridges where extra work is needed (will not install automatically)

    #               # Product Master requires set up of the Db2 instance secret before install
    #               - name: productmaster
    #                 description: Product Master
    #                 size: small
    #                 state: removed
    #         EOF
    # - name: run-the-deployer
    #   taskRef:
    #     kind: Task
    #     name: ibm-pak
    #   timeout: 6h0m0s
    #   retries: 3
    #   runAfter:
    #     - configure-cloud-paks-services
    #   params:
    #     - name: SCRIPT
    #       value: |
    #         oc delete job cloud-pak-deployer -n $(params.namespace) --ignore-not-found

    #         sleep 20

    #         oc apply -f - <<EOF
    #         apiVersion: batch/v1
    #         kind: Job
    #         metadata:
    #           labels:
    #             app: cloud-pak-deployer
    #           name: cloud-pak-deployer
    #           namespace: $(params.namespace)
    #         spec:
    #           parallelism: 1
    #           completions: 1
    #           backoffLimit: 0
    #           template:
    #             metadata:
    #               name: cloud-pak-deployer
    #               labels:
    #                 app: cloud-pak-deployer
    #             spec:
    #               containers:
    #               - name: cloud-pak-deployer
    #                 image: quay.io/cloud-pak-deployer/cloud-pak-deployer:latest
    #                 imagePullPolicy: Always
    #                 terminationMessagePath: /dev/termination-log
    #                 terminationMessagePolicy: File
    #                 env:
    #                 - name: CONFIG_DIR
    #                   value: /Data/cpd-config
    #                 - name: STATUS_DIR
    #                   value: /Data/cpd-status
    #                 - name: CP_ENTITLEMENT_KEY
    #                   valueFrom:
    #                     secretKeyRef:
    #                       key: cp-entitlement-key
    #                       name: cloud-pak-entitlement-key
    #                 volumeMounts:
    #                 - name: config-volume
    #                   mountPath: /Data/cpd-config/config
    #                 - name: status-volume
    #                   mountPath: /Data/cpd-status
    #                 command: ["/bin/sh","-xc"]
    #                 args:
    #                   - /cloud-pak-deployer/cp-deploy.sh env apply -v
    #               restartPolicy: Never
    #               securityContext:
    #                 runAsUser: 0
    #               serviceAccountName: cloud-pak-deployer-sa
    #               volumes:
    #               - name: config-volume
    #                 configMap:
    #                   name: cloud-pak-deployer-config
    #               - name: status-volume
    #                 persistentVolumeClaim:
    #                   claimName: cloud-pak-deployer-status
    #         EOF

    #         sleep 20

    #         while true
    #         do
    #           is_complete=$(oc get -n $(params.namespace) job/cloud-pak-deployer -o yaml | yq '.status.conditions.[] | select(.type == "Complete") | contains({"status": "'True'"})')
    #           if [[ $is_complete != "true" ]]; then
    #             echo "Waiting for job to be Complete."
    #           else
    #             echo "Cloud Pak Deployer job is Complete."
    #             break
    #           fi

    #           did_fail=$(oc get -n $(params.namespace) job/cloud-pak-deployer -o yaml | yq '.status.conditions.[] | select(.type == "Failed") | contains({"status": "'True'"})')
    #           if [[ $did_fail == "true" ]]; then
    #             echo "Cloud Pak Deployer job failed."
    #             echo $(oc get -n $(params.namespace) job/cloud-pak-deployer -o yaml | yq '.status.conditions.[] | select(.type == "Failed") | .reason')
    #             echo $(oc get -n $(params.namespace) job/cloud-pak-deployer -o yaml | yq '.status.conditions.[] | select(.type == "Failed") | .message')
    #             exit 68
    #           fi

    #           sleep 10
    #         done
